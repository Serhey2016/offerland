// Publish Form JavaScript - Popup Form Handler

class PublishFormManager {
    constructor() {
        this.currentPopup = null;
        this.isSubmitting = false;
        this.lastClickKey = null;
        this.lastOpenedPopupId = null;
        this.init();
    }
    
    getParentElements(element) {
        const parents = [];
        let current = element.parentElement;
        let level = 0;
        
        while (current && level < 10) {
            parents.push({
                level: level,
                tagName: current.tagName,
                className: current.className,
                id: current.id,
                classes: Array.from(current.classList)
            });
            current = current.parentElement;
            level++;
        }
        
        return parents;
    }

    init() {
        this.setupEventListeners();
        this.setupFormValidation();
        this.setupCategoryServiceFiltering();
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ "Publish" –≤ dropdown menu
        document.addEventListener('click', (e) => {
            const publishButton = e.target.closest('[data-action="publish"]');
            if (publishButton) {
                e.preventDefault();
                e.stopPropagation();
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                let itemType = 'advertising'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                let itemId = publishButton.dataset.id;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É - –±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
                const parentElement = publishButton.closest('.social_feed, .social_feed2, .social_feed_time_slot, .social_feed_job_search');
                
                if (parentElement) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
                    const postType = parentElement.dataset.postType;
                    const postId = parentElement.dataset.postId;
                    
                    if (postType) {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
                        itemType = postType;
                    } else {
                        // Fallback –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ CSS –∫–ª–∞—Å—Å–∞–º
                        if (parentElement.classList.contains('social_feed2')) {
                            itemType = 'task';
                        } else if (parentElement.classList.contains('social_feed_time_slot')) {
                            itemType = 'time_slot';
                        } else if (parentElement.classList.contains('social_feed_job_search')) {
                            itemType = 'job_search';
                        } else if (parentElement.classList.contains('social_feed')) {
                            itemType = 'advertising';
                        }
                    }
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞ –∏–ª–∏ –∏–∑ –∫–Ω–æ–ø–∫–∏
                    if (postId) {
                        itemId = postId;
                    }
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
                if (publishButton.dataset.processing === 'true') {
                    return;
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–∫
                const clickKey = `${itemType}_${itemId}_${Date.now()}`;
                if (this.lastClickKey === clickKey) {
                    return;
                }
                
                this.lastClickKey = clickKey;
                publishButton.dataset.processing = 'true';
                
                this.openPublishForm(itemId, itemType);
                
                // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                setTimeout(() => {
                    publishButton.dataset.processing = 'false';
                }, 1000);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ overlay
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('publish_form_overlay') && this.currentPopup) {
                e.preventDefault();
                e.stopPropagation();
                this.closeCurrentPopup();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.currentPopup) {
                e.preventDefault();
                this.closeCurrentPopup();
            }
        });
    }

    setupFormValidation() {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
        document.addEventListener('submit', (e) => {
            if (e.target.classList.contains('publish_form')) {
                e.preventDefault();
                this.handleFormSubmit(e.target);
            }
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        document.addEventListener('input', (e) => {
            if (e.target.closest('.publish_form')) {
                this.validateField(e.target);
            }
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        document.addEventListener('blur', (e) => {
            if (e.target.closest('.publish_form')) {
                this.validateField(e.target);
            }
        }, true);
    }

    setupCategoryServiceFiltering() {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–µ–ª–µ–∫—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ publish —Ñ–æ—Ä–º–∞—Ö
        const categorySelects = document.querySelectorAll('.publish_form select[name="category"]');
        
        categorySelects.forEach((categorySelect, index) => {
            // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            categorySelect.removeEventListener('change', categorySelect._changeHandler);
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            categorySelect._changeHandler = function(e) {
                const selectedCategoryId = e.target.value;
                
                // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ–ª–µ–∫—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
                const formGroup = categorySelect.closest('.form_group');
                const serviceSelect = formGroup.nextElementSibling.querySelector('select[name="service"]');
                
                if (serviceSelect) {
                    this.filterServicesByCategory(serviceSelect, selectedCategoryId);
                }
            }.bind(this);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            categorySelect.addEventListener('change', categorySelect._changeHandler);
        });
    }

    addHashtag(container, tagId, tagName) {
        console.log('üîç addHashtag called with:', { container, tagId, tagName });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ö—ç—à—Ç–µ–≥–æ–≤ (–º–∞–∫—Å–∏–º—É–º 10)
        const currentHashtags = container.querySelectorAll('.publish_form_hashtag_chip');
        console.log('üìä Current hashtags count:', currentHashtags.length);
        
        if (currentHashtags.length >= 10) {
            console.log('‚ö†Ô∏è Maximum hashtags reached');
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
            this.showNotification('Maximum 10 hashtags allowed', 'warning');
            return;
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–æ–≤, –∞ –Ω–µ –≤–æ –≤—Å–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        const existingHashtag = container.querySelector(`.publish_form_hashtag_chip[data-tag-id="${tagId}"]`);
        if (existingHashtag) {
            console.log('‚ùå Hashtag already exists:', existingHashtag);
            return; // –•—ç—à—Ç–µ–≥ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        }
        
        console.log('‚úÖ Creating new hashtag chip...');
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ö—ç—à—Ç–µ–≥–∞
        const hashtagChip = document.createElement('div');
        hashtagChip.className = 'publish_form_hashtag_chip';
        hashtagChip.dataset.tagId = tagId;
        hashtagChip.dataset.tagName = tagName;
        
        hashtagChip.innerHTML = `
            #${tagName}
            <button type="button" class="remove_chip" aria-label="Remove hashtag">√ó</button>
        `;
        
        console.log('üîß Created hashtag chip:', hashtagChip);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
        const removeBtn = hashtagChip.querySelector('.remove_chip');
        removeBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            console.log('üóëÔ∏è Remove button clicked for hashtag:', tagName);
            this.removeHashtag(container, hashtagChip);
        });
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º —Ö—ç—à—Ç–µ–≥ –ø–µ—Ä–µ–¥ input –ø–æ–ª–µ–º
        const input = container.querySelector('.publish_form_hashtags_input');
        console.log('üìç Inserting before input:', input);
        
        try {
            container.insertBefore(hashtagChip, input);
            console.log('‚úÖ Hashtag chip inserted successfully');
        } catch (error) {
            console.error('‚ùå Error inserting hashtag chip:', error);
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
        this.updateHiddenHashtagsField(container);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
        hashtagChip.classList.add('added');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ
        if (currentHashtags.length + 1 >= 10) {
            container.classList.add('limit-reached');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ö—ç—à—Ç–µ–≥–æ–≤
        this.updateHashtagCounter(container);
        
        console.log('üéâ Hashtag addition completed successfully');
        console.log('üìä Final hashtag count:', container.querySelectorAll('.publish_form_hashtag_chip').length);
    }
    
    removeHashtag(container, hashtagChip) {
        // –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        hashtagChip.classList.add('removing');
        
        setTimeout(() => {
            if (hashtagChip.parentNode) {
                hashtagChip.parentNode.removeChild(hashtagChip);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
            this.updateHiddenHashtagsField(container);
            
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ –µ—Å–ª–∏ —Ö—ç—à—Ç–µ–≥–æ–≤ –º–µ–Ω—å—à–µ 10
            const currentHashtags = container.querySelectorAll('.publish_form_hashtag_chip');
            if (currentHashtags.length < 10) {
                container.classList.remove('limit-reached');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ö—ç—à—Ç–µ–≥–æ–≤
            this.updateHashtagCounter(container);
        }, 200);
    }
    
    updateHashtagCounter(container) {
        const currentHashtags = container.querySelectorAll('.publish_form_hashtag_chip');
        const count = currentHashtags.length;
        
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        let counter = container.querySelector('.publish_form_hashtag_counter');
        if (counter) {
            counter.remove();
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö—ç—à—Ç–µ–≥–∏
        if (count > 0) {
            counter = document.createElement('div');
            counter.className = 'publish_form_hashtag_counter';
            counter.textContent = count;
            container.appendChild(counter);
        }
    }
    
    showSimpleDropdown(inputElement) {
        // –ù–∞—Ö–æ–¥–∏–º dropdown –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ input
        const container = inputElement.closest('.publish_form_hashtag_container');
        
        if (!container) {
            return;
        }
        
        // –ò—â–µ–º dropdown - —Å–Ω–∞—á–∞–ª–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –ø–æ—Ç–æ–º –∫–∞–∫ —Å–æ—Å–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        let dropdown = container.querySelector('.publish_form_hashtags_dropdown');
        
        if (!dropdown) {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–Ω—É—Ç—Ä–∏, –∏—â–µ–º –∫–∞–∫ —Å–æ—Å–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
            dropdown = container.nextElementSibling;
        }
        
        if (!dropdown || !dropdown.classList.contains('publish_form_hashtags_dropdown')) {
            return;
        }
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º dropdown –≤–Ω—É—Ç—Ä—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ö—ç—à—Ç–µ–≥–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if (dropdown.parentNode !== container) {
            container.appendChild(dropdown);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º dropdown —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        dropdown.style.setProperty('display', 'block', 'important');
        dropdown.style.setProperty('visibility', 'visible', 'important');
        dropdown.style.setProperty('opacity', '1', 'important');
        dropdown.style.setProperty('z-index', '500', 'important');
        dropdown.style.setProperty('position', 'absolute', 'important');
        dropdown.style.setProperty('top', '100%', 'important');
        dropdown.style.setProperty('left', '0', 'important');
        dropdown.style.setProperty('right', '0', 'important');
        dropdown.style.setProperty('width', '100%', 'important');
        
        dropdown.classList.add('show');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö—ç—à—Ç–µ–≥–∏ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
        const allTagsData = container.getAttribute('data-all-tags');
        let allTags = [];
        
        try {
            if (allTagsData) {
                allTags = JSON.parse(allTagsData);
            }
        } catch (e) {
            console.error('Error parsing hashtags data:', e);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ö—ç—à—Ç–µ–≥–∏
        const selectedHashtags = this.getSelectedHashtags(container);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö—ç—à—Ç–µ–≥–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ)
        const availableTags = allTags.filter(tag => 
            !selectedHashtags.includes(tag.tag.toLowerCase())
        );
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º dropdown —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ö—ç—à—Ç–µ–≥–∞–º–∏
        if (availableTags.length > 0) {
            dropdown.innerHTML = availableTags.map(tag => 
                `<div class="publish_form_hashtags_dropdown_item" data-tag-id="${tag.id}" data-tag-name="${tag.tag}">#${tag.tag}</div>`
            ).join('');
        } else {
            dropdown.innerHTML = '<div class="publish_form_hashtags_dropdown_item no-results">No more hashtags available</div>';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è dropdown –∏ –≤—ã–±–æ—Ä–∞ —Ö—ç—à—Ç–µ–≥–æ–≤
        this.setupDropdownCloseHandlers(dropdown, inputElement, container);
        const updatedDropdown = this.setupHashtagSelectionHandlers(dropdown, inputElement, container);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –ª–∏–º–∏—Ç–µ –µ—Å–ª–∏ —Ö—ç—à—Ç–µ–≥–æ–≤ —É–∂–µ 10
        const currentHashtags = container.querySelectorAll('.publish_form_hashtag_chip');
        if (currentHashtags.length >= 10) {
            if (updatedDropdown) {
                updatedDropdown.innerHTML = '<div class="publish_form_hashtags_dropdown_item no-results">Maximum hashtags reached (10/10)</div>';
            } else {
                dropdown.innerHTML = '<div class="publish_form_hashtags_dropdown_item no-results">Maximum hashtags reached (10/10)</div>';
            }
        }
    }
    
    setupDropdownCloseHandlers(dropdown, inputElement, container) {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        const closeDropdown = () => {
            dropdown.style.setProperty('display', 'none', 'important');
            dropdown.style.setProperty('visibility', 'hidden', 'important');
            dropdown.style.setProperty('opacity', '0', 'important');
            dropdown.classList.remove('show');
        };
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç dropdown
        dropdown.addEventListener('click', (e) => {
            if (e.target.classList.contains('publish_form_hashtags_dropdown_item')) {
                closeDropdown();
            }
        });
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ input
        inputElement.addEventListener('blur', () => {
            setTimeout(closeDropdown, 150);
        });
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
        inputElement.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                closeDropdown();
            }
        });
    }
    
    setupHashtagSelectionHandlers(dropdown, inputElement, container) {
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        const newDropdown = dropdown.cloneNode(true);
        dropdown.parentNode.replaceChild(newDropdown, dropdown);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ö—ç—à—Ç–µ–≥–∞
        newDropdown.addEventListener('click', (e) => {
            const dropdownItem = e.target.closest('.publish_form_hashtags_dropdown_item');
            if (!dropdownItem || dropdownItem.classList.contains('no-results')) {
                return;
            }
            
            const tagId = dropdownItem.dataset.tagId;
            const tagName = dropdownItem.dataset.tagName;
            
            if (tagId && tagName) {
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–æ–≤
                const existingHashtag = container.querySelector(`.publish_form_hashtag_chip[data-tag-id="${tagId}"]`);
                if (existingHashtag) {
                    console.log('Hashtag already exists:', tagName);
                    return; // –•—ç—à—Ç–µ–≥ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
                }
                
                console.log('Adding hashtag:', tagName);
                this.addHashtag(container, tagId, tagName);
                inputElement.value = '';
                inputElement.focus();
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown
                this.hideDropdown(newDropdown);
            }
        });
        
        return newDropdown;
    }
    
    getSelectedHashtags(container) {
        const hashtagChips = container.querySelectorAll('.publish_form_hashtag_chip');
        return Array.from(hashtagChips).map(chip => 
            chip.dataset.tagName.toLowerCase()
        );
    }
    
    updateHiddenHashtagsField(container) {
        const selectedHashtags = this.getSelectedHashtags(container);
        const hiddenField = container.closest('.publish_form').querySelector('input[name="hashtags"]');
        
        if (hiddenField) {
            hiddenField.value = selectedHashtags.join(',');
        }
    }
    
    hideDropdown(dropdown) {
        if (!dropdown || !dropdown.parentNode) {
            return;
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º dropdown
        dropdown.style.setProperty('display', 'none', 'important');
        dropdown.style.setProperty('visibility', 'hidden', 'important');
        dropdown.style.setProperty('opacity', '0', 'important');
        dropdown.classList.remove('show');
    }

    filterServicesByCategory(serviceSelect, selectedCategoryId) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        const serviceOptions = serviceSelect.querySelectorAll('option');
        
        let visibleCount = 0;
        
        serviceOptions.forEach((option, index) => {
            if (index === 0) {
                // –ü–µ—Ä–≤–∞—è –æ–ø—Ü–∏—è - placeholder, –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–∞
                option.style.display = '';
                option.disabled = false;
                visibleCount++;
                return;
            }
            
            const optionCategoryId = option.getAttribute('data-category');
            
            if (selectedCategoryId && optionCategoryId === selectedCategoryId) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                option.style.display = '';
                option.disabled = false;
                visibleCount++;
            } else if (!selectedCategoryId) {
                // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
                option.style.display = '';
                option.disabled = false;
                visibleCount++;
            } else {
                // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                option.style.display = 'none';
                option.disabled = true;
            }
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        serviceSelect.value = '';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        if (visibleCount > 1) {
            serviceSelect.disabled = false;
            serviceSelect.style.opacity = '1';
        } else {
            serviceSelect.disabled = true;
            serviceSelect.style.opacity = '0.5';
        }
    }

    openPublishForm(itemId, itemType) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º ID –¥–ª—è –ø–æ–∏—Å–∫–∞ popup
        const popupId = `publish_form_popup_${itemType}_${itemId}`;
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ popup'—ã –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –Ω–æ–≤–æ–≥–æ
        this.closeOtherPopupsOfSameType(itemType);
        
        // –ò—â–µ–º popup –ø–æ ID
        const popup = document.getElementById(popupId);
        if (!popup) {
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ event listener'—ã
        this.removeConflictingEventListeners(popup, itemId, itemType);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popup
        popup.style.display = 'block';
        popup.style.opacity = '1';
        popup.style.visibility = 'visible';
        popup.classList.add('show');
        
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º input –ø–æ–ª–µ
        const firstInput = popup.querySelector('input, select, textarea');
        if (firstInput) {
            firstInput.focus();
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º event listener'—ã –¥–ª—è popup'–∞
        this.setupPopupEventListeners(popup, itemId, itemType);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        this.addAutoCloseProtection(popup);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π popup
        this.currentPopup = popup;
    }

    closeCurrentPopup() {
        if (!this.currentPopup) {
            return;
        }

        const popup = this.currentPopup;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        popup.style.opacity = '0';
        popup.style.visibility = 'hidden';

        setTimeout(() => {
            popup.classList.remove('show');
            popup.style.display = 'none';
            document.body.style.overflow = '';
            this.currentPopup = null;
            this.lastOpenedPopupId = null; // –û—á–∏—â–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ popup
        }, 300);
    }
    
    closeOtherPopupsOfSameType(itemType) {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ popup'—ã
        const allPopups = document.querySelectorAll('.publish_form_popup');
        
        allPopups.forEach((popup, index) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ popup —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∏–ø
            const containsType = popup.id.includes(`publish_form_popup_${itemType}_`);
            
            // –ï—Å–ª–∏ —ç—Ç–æ popup —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞ –∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
            if (containsType && popup.classList.contains('show')) {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º popup
                popup.style.display = 'none';
                popup.style.opacity = '0';
                popup.style.visibility = 'hidden';
                popup.classList.remove('show');
            }
        });
    }

    removeConflictingEventListeners(popup, itemId, itemType) {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Ñ–æ—Ä–º—É
        const closeButtons = popup.querySelectorAll('.publish_form_close, .publish_form_cancel');
        
        closeButtons.forEach((btn, index) => {
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            const newBtn = btn.cloneNode(true);
            
            btn.parentNode.replaceChild(newBtn, btn);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            newBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.closeCurrentPopup();
            });
        });

        // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ overlay
        const overlay = popup.querySelector('.publish_form_overlay');
        if (overlay) {
            const newOverlay = overlay.cloneNode(true);
            overlay.parentNode.replaceChild(newOverlay, overlay);
            
            newOverlay.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.closeCurrentPopup();
            });
        }
    }

    setupPopupEventListeners(popup, itemId, itemType) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π popup –ø–∞—Ä–∞–º–µ—Ç—Ä
        if (!popup) {
            return;
        }

        // –ö–Ω–æ–ø–∫–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ removeConflictingEventListeners
        // –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ input
        const hashtagInput = popup.querySelector('.publish_form_hashtags_input');
        
        if (hashtagInput) {
            hashtagInput.addEventListener('click', (e) => {
                this.showSimpleDropdown(e.target);
            });
            
            hashtagInput.addEventListener('focus', (e) => {
                this.showSimpleDropdown(e.target);
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º
            hashtagInput.addEventListener('input', (e) => {
                this.filterHashtagsDropdown(e.target);
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ö—ç—à—Ç–µ–≥–∞ –ø–æ Enter
            hashtagInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    this.handleEnterKey(e.target);
                }
            });
        }
    }
    
    filterHashtagsDropdown(inputElement) {
        const container = inputElement.closest('.publish_form_hashtag_container');
        const dropdown = container.querySelector('.publish_form_hashtags_dropdown');
        
        if (!dropdown || !dropdown.classList.contains('show')) {
            return;
        }
        
        const searchTerm = inputElement.value.toLowerCase().trim();
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö—ç—à—Ç–µ–≥–∏
        const allTagsData = container.getAttribute('data-all-tags');
        let allTags = [];
        
        try {
            if (allTagsData) {
                allTags = JSON.parse(allTagsData);
            }
        } catch (e) {
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ö—ç—à—Ç–µ–≥–∏
        const selectedHashtags = this.getSelectedHashtags(container);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É –∏ –∏—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
        let filteredTags = allTags.filter(tag => 
            !selectedHashtags.includes(tag.tag.toLowerCase()) &&
            tag.tag.toLowerCase().includes(searchTerm)
        );
        
        // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        if (!searchTerm) {
            filteredTags = allTags.filter(tag => 
                !selectedHashtags.includes(tag.tag.toLowerCase())
            );
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ dropdown
        if (filteredTags.length > 0) {
            dropdown.innerHTML = filteredTags.map(tag => 
                `<div class="publish_form_hashtags_dropdown_item" data-tag-id="${tag.id}" data-tag-name="${tag.tag}">#${tag.tag}</div>`
            ).join('');
        } else if (searchTerm) {
            dropdown.innerHTML = '<div class="publish_form_hashtags_dropdown_item no-results">No hashtags found</div>';
        } else {
            dropdown.innerHTML = '<div class="publish_form_hashtags_dropdown_item no-results">No more hashtags available</div>';
        }
        
        // –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const updatedDropdown = this.setupHashtagSelectionHandlers(dropdown, inputElement, container);
        
        // –ï—Å–ª–∏ dropdown –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        if (updatedDropdown && updatedDropdown !== dropdown) {
            // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π dropdown –Ω–æ–≤—ã–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            container.replaceChild(updatedDropdown, dropdown);
        }
    }
    
    handleEnterKey(inputElement) {
        const container = inputElement.closest('.publish_form_hashtag_container');
        const searchTerm = inputElement.value.trim();
        
        if (!searchTerm) {
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ö—ç—à—Ç–µ–≥ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        const allTagsData = container.getAttribute('data-all-tags');
        let allTags = [];
        
        try {
            if (allTagsData) {
                allTags = JSON.parse(allTagsData);
            }
        } catch (e) {
            return;
        }
        
        // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        const exactMatch = allTags.find(tag => 
            tag.tag.toLowerCase() === searchTerm.toLowerCase()
        );
        
        if (exactMatch) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ö—ç—à—Ç–µ–≥
            this.addHashtag(container, exactMatch.id, exactMatch.tag);
            inputElement.value = '';
        } else {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ö—ç—à—Ç–µ–≥–∞
            // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
            inputElement.value = '';
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown
        const dropdown = container.querySelector('.publish_form_hashtags_dropdown');
        if (dropdown) {
            this.hideDropdown(dropdown);
        }
    }

    addAutoCloseProtection(popup) {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        const protectionInterval = setInterval(() => {
            if (popup.classList.contains('show')) {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
                popup.style.display = 'block';
                popup.style.opacity = '1';
                popup.style.visibility = 'visible';
                popup.classList.add('show');
            } else {
                // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –±—ã–ª–∞ —Å–∫—Ä—ã—Ç–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—É
                clearInterval(protectionInterval);
            }
        }, 100);

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            clearInterval(protectionInterval);
        }, 10000);
    }

    validateField(field) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ field —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ value
        if (!field || typeof field.value === 'undefined') {
            return false;
        }
        
        const value = field.value.trim();
        const isRequired = field.hasAttribute('required');
        const fieldType = field.type;
        const fieldName = field.name;

        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
        this.removeFieldError(field);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (isRequired && !value) {
            this.showFieldError(field, 'This field is required');
            return false;
        }

        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (value) {
            switch (fieldName) {
                case 'title':
                    if (value.length < 3) {
                        this.showFieldError(field, 'Title must be at least 3 characters long');
                        return false;
                    }
                    break;
                case 'description':
                    if (value.length < 10) {
                        this.showFieldError(field, 'Description must be at least 10 characters long');
                        return false;
                    }
                    break;
                case 'budget':
                    if (parseFloat(value) < 0) {
                        this.showFieldError(field, 'Budget cannot be negative');
                        return false;
                    }
                    break;
                case 'deadline':
                    const selectedDate = new Date(value);
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    if (selectedDate < today) {
                        this.showFieldError(field, 'Deadline cannot be in the past');
                        return false;
                    }
                    break;
            }
        }

        return true;
    }

    showFieldError(field, message) {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏
        const errorElement = document.createElement('div');
        errorElement.className = 'field_error';
        errorElement.textContent = message;
        errorElement.style.cssText = `
            color: #ef4444;
            font-size: 12px;
            margin-top: 4px;
            animation: fadeIn 0.2s ease;
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø–æ–ª—è —Å –æ—à–∏–±–∫–æ–π
        field.style.borderColor = '#ef4444';
        field.style.boxShadow = '0 0 0 3px rgba(239, 68, 68, 0.1)';

        // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ—Å–ª–µ –ø–æ–ª—è
        field.parentNode.appendChild(errorElement);
    }

    removeFieldError(field) {
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª–∏ –æ—à–∏–±–∫–∏
        field.style.borderColor = '';
        field.style.boxShadow = '';

        // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const errorElement = field.parentNode.querySelector('.field_error');
        if (errorElement) {
            errorElement.remove();
        }
    }

    validateForm(form) {
        const fields = form.querySelectorAll('input, select, textarea');
        let isValid = true;

        fields.forEach(field => {
            if (!this.validateField(field)) {
                isValid = false;
            }
        });

        return isValid;
    }

    async handleFormSubmit(form) {
        if (this.isSubmitting) return;

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É
        if (!this.validateForm(form)) {
            return;
        }

        this.isSubmitting = true;
        const submitBtn = form.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        form.classList.add('loading');
        submitBtn.innerHTML = 'Publishing...';

        try {
            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            // –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à—Ç–µ–≥–∏ –∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è
            const hashtagsInput = form.querySelector('input[name="hashtags"]');
            if (hashtagsInput) {
                data.hashtags = hashtagsInput.value;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await this.submitFormData(data);

            if (response.success) {
                this.showSuccessMessage('Advertising published successfully!');
                this.closeCurrentPopup();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                this.showErrorMessage(response.message || 'Failed to publish advertising');
            }
        } catch (error) {
            console.error('Error publishing advertising:', error);
            this.showErrorMessage('An error occurred while publishing. Please try again.');
        } finally {
            this.isSubmitting = false;
            form.classList.remove('loading');
            submitBtn.innerHTML = originalText;
        }
    }

    async submitFormData(data) {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç AJAX –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
        // –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve({
                    success: true,
                    message: 'Advertising published successfully'
                });
            }, 2000);
        });

        // –†–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:
        /*
        const response = await fetch('/api/publish-advertising/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': this.getCSRFToken()
            },
            body: JSON.stringify(data)
        });

        return await response.json();
        */
    }

    getCSRFToken() {
        return document.querySelector('[name=csrfmiddlewaretoken]')?.value || '';
    }

    showSuccessMessage(message) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        this.showNotification(message, 'success');
    }

    showErrorMessage(message) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        this.showNotification(message, 'error');
    }

    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification notification_${type}`;
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 16px 24px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 10001;
            animation: slideInRight 0.3s ease;
            max-width: 400px;
        `;

        // –°—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if (type === 'success') {
            notification.style.background = '#10b981';
        } else if (type === 'error') {
            notification.style.background = '#ef4444';
        } else {
            notification.style.background = '#3b82f6';
        }

        document.body.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.3s ease';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 5000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PublishFormManager –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (window.publishFormManager) {
        return;
    }
    
    window.publishFormManager = new PublishFormManager();
});

// CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
    @keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @keyframes slideOutRight {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
    
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
`;
document.head.appendChild(style);