// tasks_projects_tenders.js - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –≤ –∑–∞–¥–∞—á–∞—Ö, –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ —Ç–µ–Ω–¥–µ—Ä–∞—Ö

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ DOM –∑–∞–≥—Ä—É–∂–µ–Ω
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initNotesPopup);
} else {
    initNotesPopup();
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let isInitialized = false;
let currentTaskId = null;

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function initNotesPopup() {
    if (isInitialized) {
        return;
    }
    
    initEventHandlers();
    initHeartIcons(); // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–¥–µ—á–µ–∫
    isInitialized = true;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–¥–µ—á–µ–∫ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
function initHeartIcons() {
    const heartIcons = document.querySelectorAll('.sftsts1_favorites_icon');
    console.log('üíñ Initializing heart icons for tasks/projects/tenders, found:', heartIcons.length);
    
    heartIcons.forEach(icon => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (!icon.dataset.favorite) {
            icon.dataset.favorite = 'false';
        }
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        const newIcon = icon.cloneNode(true);
        icon.parentNode.replaceChild(newIcon, icon);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        newIcon.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            const isFavorite = newIcon.dataset.favorite === 'true';
            console.log('üíñ Heart clicked in task/project/tender! Current state:', isFavorite);
            
            if (isFavorite) {
                // –£–±–∏—Ä–∞–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                newIcon.classList.remove('favorite-checked');
                newIcon.classList.add('favorite-unchecked');
                newIcon.dataset.favorite = 'false';
                console.log('üíî Removed from favorites');
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                newIcon.classList.remove('favorite-unchecked');
                newIcon.classList.add('favorite-checked');
                newIcon.dataset.favorite = 'true';
                console.log('‚ù§Ô∏è Added to favorites');
            }
        });
        
        console.log('üíñ Heart icon initialized for task/project/tender:', newIcon.id);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initEventHandlers() {
    const notesIcons = document.querySelectorAll('.notes-icon');
    const notesPopups = document.querySelectorAll('.notes-popup');
    const notesForms = document.querySelectorAll('.notes-form');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∫–æ–Ω–æ–∫ –∑–∞–º–µ—Ç–æ–∫
    notesIcons.forEach(icon => {
        icon.addEventListener('click', function(e) {
            e.preventDefault();
            const taskId = this.dataset.taskId;
            openNotesPopup(taskId);
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–æ—Ä–º –∑–∞–º–µ—Ç–æ–∫
    notesForms.forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const taskId = this.dataset.taskId;
            saveNotes(taskId);
        });
    });
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    initGlobalEventHandlers();
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function initGlobalEventHandlers() {
    if (window.globalEventHandlersInitialized) {
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Save
    document.addEventListener('click', function(e) {
        // Validate event target
        if (!e.target || typeof e.target.classList !== 'object' || typeof e.target.closest !== 'function') {
            return;
        }
        
        if (e.target.classList.contains('save-btn')) {
            const form = e.target.closest('form');
            if (form) {
                const taskId = form.dataset.taskId;
                saveNotes(taskId);
            }
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Cancel
    document.addEventListener('click', function(e) {
        // Validate event target
        if (!e.target || typeof e.target.classList !== 'object' || typeof e.target.closest !== 'function') {
            return;
        }
        
        if (e.target.classList.contains('cancel-btn')) {
            const form = e.target.closest('form');
            if (form) {
                const taskId = form.dataset.taskId;
                closeNotesPopup(taskId);
            }
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Close
    document.addEventListener('click', function(e) {
        // Validate event target
        if (!e.target || typeof e.target.classList !== 'object' || typeof e.target.closest !== 'function') {
            return;
        }
        
        if (e.target.classList.contains('close-btn')) {
            const form = e.target.closest('form');
            if (form) {
                const taskId = form.dataset.taskId;
                closeNotesPopup(taskId);
            }
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Notes
    document.addEventListener('mousedown', function(e) {
        if (e.target.classList.contains('notes-btn')) {
            const taskId = e.target.dataset.taskId;
            openNotesPopup(taskId);
        }
    });
    
    window.globalEventHandlersInitialized = true;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞ –∑–∞–º–µ—Ç–æ–∫
function openNotesPopup(taskId) {
    const popup = document.querySelector(`[data-task-id="${taskId}"].notes-popup`);
    if (!popup) {
        return;
    }
    
    popup.style.display = 'block';
    currentTaskId = taskId;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CKEditor
    initCKEditor(taskId);
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–º–µ—Ç–æ–∫
    loadNotes(taskId);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞ –∑–∞–º–µ—Ç–æ–∫
function closeNotesPopup(taskId) {
    const popup = document.querySelector(`[data-task-id="${taskId}"].notes-popup`);
    if (!popup) {
        return;
    }
    
    popup.style.display = 'none';
    
    // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ CKEditor
    destroyCKEditor(taskId);
    
    if (currentTaskId === taskId) {
        currentTaskId = null;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CKEditor
function initCKEditor(taskId) {
    const textarea = document.querySelector(`[data-task-id="${taskId}"].notes-textarea`);
    if (!textarea || textarea.dataset.ckeditorInitialized === 'true') {
        return;
    }
    
    if (typeof ClassicEditor !== 'undefined') {
        ClassicEditor
            .create(textarea, {
                toolbar: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', '|', 'undo', 'redo'],
                placeholder: 'Enter your notes here...'
            })
            .then(editor => {
                textarea.dataset.ckeditorInitialized = 'true';
                textarea.dataset.ckeditorInstance = editor;
            })
            .catch(error => {
                console.error('CKEditor initialization error:', error);
            });
    }
}

// –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ CKEditor
function destroyCKEditor(taskId) {
    const textarea = document.querySelector(`[data-task-id="${taskId}"].notes-textarea`);
    if (!textarea || textarea.dataset.ckeditorInitialized !== 'true') {
        return;
    }
    
    const editor = textarea.dataset.ckeditorInstance;
    if (editor && typeof editor.destroy === 'function') {
        editor.destroy();
        textarea.dataset.ckeditorInitialized = 'false';
        delete textarea.dataset.ckeditorInstance;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫
function loadNotes(taskId) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å AJAX –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–º–µ—Ç–æ–∫
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
    const textarea = document.querySelector(`[data-task-id="${taskId}"].notes-textarea`);
    if (textarea) {
        textarea.value = '';
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
function saveNotes(taskId) {
    const form = document.querySelector(`[data-task-id="${taskId}"].notes-form`);
    if (!form) {
        return;
    }
    
    const formData = new FormData(form);
    const notes = formData.get('notes');
    
    // AJAX –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
    fetch('/api/notes/save/', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrftoken')
        },
        body: JSON.stringify({
            task_id: taskId,
            notes: notes
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification('Notes saved successfully!', 'success');
            closeNotesPopup(taskId);
        } else {
            showNotification('Failed to save notes: ' + data.error, 'error');
        }
    })
    .catch(error => {
        showNotification('Error saving notes: ' + error.message, 'error');
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

function showNotification(message, type) {
    if (typeof showAlertifyNotification !== 'undefined') {
        showAlertifyNotification(message, type);
    } else if (typeof alertify !== 'undefined') {
        alertify[type](message);
    } else {
        alert(message);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.NotesPopup = {
    open: openNotesPopup,
    close: closeNotesPopup,
    save: saveNotes
};

window.HeartIcons = {
    init: initHeartIcons
};


