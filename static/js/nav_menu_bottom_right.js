const categories = [
    {
        name: 'Touchpoint',
        subcategories: ['All', 'Contacts' ]
    },
    {
        name: 'Inbox',
        subcategories: ['All', 'Favorites', 'Projects', 'Tasks', 'Time slots']
    },
    {
        name: 'Backlog',
        subcategories: ['All', 'Projects', 'Tasks', 'Time slots']
    },
    {
        name: 'Agenda',
        subcategories: ['All', 'Projects', 'Tasks', 'Time slots']
    },
    {
        name: 'Waiting',
        subcategories: ['All', 'Published', 'Projects', 'Tasks', 'Time slots']
    },
    {
        name: 'Someday',
        subcategories: ['All', 'Projects', 'Tasks', 'Time slots']
    },
    {
        name: 'Projects',
        subcategories: ['All', 'Projects', 'Tasks', 'Time slots']
    },
    {
        name: 'Done',
        subcategories: ['All', 'Projects', 'Tasks', 'Time slots']
    },
    {
        name: 'Archive',
        subcategories: ['All', 'Projects', 'Tasks', 'Time slots']
    }
];

let currentCategoryIndex = 0;

document.addEventListener('DOMContentLoaded', () => {
    // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–µ–ª–∫–∏
    const upArrow = document.querySelector('.nav-arrow-up');
    const downArrow = document.querySelector('.nav-arrow-down');

    // DOM-—ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryNameElement = document.querySelector('.nav_menu_category_name');
    const navMenuContainer = document.querySelector('.nav_menu_container');
    let currentCategoryIndex = 0;





    function updateCategoryName(index) {
        categoryNameElement.textContent = categories[index].name;
        
        // Dispatch event to sync with task tracker
        const event = new CustomEvent('navMenuCategoryChange', {
            detail: { category: categories[index].name }
        });
        window.dispatchEvent(event);
    }

    function updateLineColors(direction) {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        navMenuContainer.classList.remove('nav-up-active', 'nav-down-active');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å
        if (direction === 'up') {
            navMenuContainer.classList.add('nav-up-active');
        } else if (direction === 'down') {
            navMenuContainer.classList.add('nav-down-active');
        }
    }


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    function updatePageWithFilters(categoryIndex, subCategoryIndex) {
        const category = categories[categoryIndex];
        const subCategory = category.subcategories[subCategoryIndex];
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let statusFilter = 'all';
        let categoryFilter = 'all';
        
        if (category.name === 'Touchpoint') {
            if (subCategory === 'All') {
                statusFilter = 'all';
            } else if (subCategory === 'Published') {
                statusFilter = 'published';
            } else if (subCategory === 'Archive') {
                statusFilter = 'archived';
            }
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º 'all'
        }
        
        // –°—Ç—Ä–æ–∏–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞
        const currentUrl = new URL(window.location);
        currentUrl.searchParams.set('status', statusFilter);
        currentUrl.searchParams.set('category', categoryFilter);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.history.pushState({}, '', currentUrl.toString());
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ AJAX
        loadContentWithFilters(statusFilter, categoryFilter);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AJAX
    function loadContentWithFilters(statusFilter, categoryFilter) {
        const socialFeedsSection = document.querySelector('.social_feeds');
        if (!socialFeedsSection) return;
        
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        const startTime = Date.now();
        const minLoadingTime = 1000; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏–Ω–Ω–µ—Ä–∞ (1 —Å–µ–∫—É–Ω–¥–∞)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å loading –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã
        socialFeedsSection.classList.add('loading');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        socialFeedsSection.innerHTML = `
            <div class="loading" style="min-height: 800px; padding: 200px 120px;">
                <div class="loading-spinner"></div>
                <span style="font-size: 48px; font-weight: 600;">Loading content...</span>
            </div>
        `;
        
        // –°—Ç—Ä–æ–∏–º URL –¥–ª—è AJAX –∑–∞–ø—Ä–æ—Å–∞
        const filterUrl = new URL(window.location);
        filterUrl.searchParams.set('status', statusFilter);
        filterUrl.searchParams.set('category', categoryFilter);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        fetch(filterUrl.toString())
            .then(response => response.text())
            .then(html => {
                // –ü–∞—Ä—Å–∏–º HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–∫—Ü–∏—é —Å –ø–æ—Å—Ç–∞–º–∏
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const newSocialFeeds = doc.querySelector('.social_feeds');
                
                // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                const updateContent = () => {
                    if (newSocialFeeds) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å—Ç—ã –≤ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                        const posts = newSocialFeeds.querySelectorAll('.social_feed, .social_feed2');
                        
                        if (posts.length > 0) {
                            // –ï—Å—Ç—å –ø–æ—Å—Ç—ã - –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                            socialFeedsSection.innerHTML = newSocialFeeds.innerHTML;
                            socialFeedsSection.classList.remove('loading', 'empty');
                            
                            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º JavaScript –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
                            if (typeof AdvertisingFeed !== 'undefined' && AdvertisingFeed.init) {
                                AdvertisingFeed.init();
                            }
                        } else {
                            // –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
                            showEmptyState(socialFeedsSection, statusFilter);
                        }
                    } else {
                        // –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
                        showEmptyState(socialFeedsSection, statusFilter);
                    }
                };
                
                // –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å
                const elapsedTime = Date.now() - startTime;
                const remainingTime = Math.max(0, minLoadingTime - elapsedTime);
                
                if (remainingTime > 0) {
                    // –ñ–¥–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                    setTimeout(updateContent, remainingTime);
                } else {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ä–∞–∑—É
                    updateContent();
                }
            })
            .catch(error => {
                // Error loading content
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                const elapsedTime = Date.now() - startTime;
                const remainingTime = Math.max(0, minLoadingTime - elapsedTime);
                
                setTimeout(() => {
                    socialFeedsSection.innerHTML = `
                        <div class="error">
                            <div class="error-icon">‚ö†Ô∏è</div>
                            <div class="error-title">Error loading content</div>
                            <div class="error-description">Please try again or refresh the page.</div>
                        </div>
                    `;
                    socialFeedsSection.classList.remove('loading');
                    socialFeedsSection.classList.add('empty');
                }, remainingTime);
            });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ—Å—Ç–æ–≤
    function showEmptyState(container, statusFilter) {
        let icon, title, description;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        switch (statusFilter) {
            case 'published':
                icon = 'üì∞';
                title = 'No Published Posts';
                description = 'There are no published posts in this category yet.';
                break;
            case 'archived':
                icon = 'üì¶';
                title = 'No Archived Posts';
                description = 'There are no archived posts in this category yet.';
                break;
            case 'draft':
                icon = 'üìù';
                title = 'No Draft Posts';
                description = 'There are no draft posts in this category yet.';
                break;
            default:
                icon = 'üì≠';
                title = 'No Posts Found';
                description = 'There are no posts in this category yet.';
        }
        
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">${icon}</div>
                <div class="empty-state-title">${title}</div>
                <div class="empty-state-description">${description}</div>
            </div>
        `;
        
        container.classList.remove('loading');
        container.classList.add('empty');
    }

    upArrow.addEventListener('click', () => {
        currentCategoryIndex = currentCategoryIndex === 0 ? categories.length - 1 : currentCategoryIndex - 1;
        updateCategoryName(currentCategoryIndex);
        updateLineColors('up');
    });

    downArrow.addEventListener('click', () => {
        currentCategoryIndex = currentCategoryIndex === categories.length - 1 ? 0 : currentCategoryIndex + 1;
        updateCategoryName(currentCategoryIndex);
        updateLineColors('down');
    });



    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–≤–∞–π–ø–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const menuContainer = document.querySelector('.nav_menu');
    let touchStartX = 0;
    let touchStartY = 0;

    menuContainer.addEventListener('touchstart', function (e) {
        if (e.touches.length === 1) {
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
        }
    });

    menuContainer.addEventListener('touchend', function (e) {
        if (e.changedTouches.length === 1) {
            const touchEndX = e.changedTouches[0].clientX;
            const touchEndY = e.changedTouches[0].clientY;

            const dx = touchEndX - touchStartX;
            const dy = touchEndY - touchStartY;

            if (Math.abs(dx) <= Math.abs(dy)) {
                // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
                if (dy > 30) {
                    // –°–≤–∞–π–ø –≤–Ω–∏–∑
                    downArrow.click();
                } else if (dy < -30) {
                    // –°–≤–∞–π–ø –≤–≤–µ—Ä—Ö
                    upArrow.click();
                }
            }
        }
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ URL
    function getCurrentStatusFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get('status') || 'all';
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
    function setNavigationPositionFromURL() {
        const currentStatus = getCurrentStatusFromURL();
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "Touchpoint"
        const touchpointIndex = categories.findIndex(cat => cat.name === 'Touchpoint');
        if (touchpointIndex === -1) return;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
        let subCategoryIndex = 0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "All"
        
        if (currentStatus === 'published') {
            subCategoryIndex = categories[touchpointIndex].subcategories.findIndex(sub => sub === 'Published');
        } else if (currentStatus === 'archived') {
            subCategoryIndex = categories[touchpointIndex].subcategories.findIndex(sub => sub === 'Archive');
        }
        
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        if (subCategoryIndex !== -1) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            currentCategoryIndex = touchpointIndex;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            updateCategoryName(currentCategoryIndex);
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    updateCategoryName(currentCategoryIndex);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
    setNavigationPositionFromURL();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±—Ä–∞—É–∑–µ—Ä–∞ "–ù–∞–∑–∞–¥/–í–ø–µ—Ä–µ–¥"
    window.addEventListener('popstate', function(event) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏
        setNavigationPositionFromURL();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ URL
        const currentStatus = getCurrentStatusFromURL();
        loadContentWithFilters(currentStatus, 'all');
    });

    // Listen for changes from task tracker
    window.addEventListener('taskTrackerCategoryChange', function(event) {
        const { category } = event.detail;
        const categoryIndex = categories.findIndex(cat => cat.name === category);
        
        if (categoryIndex !== -1) {
            currentCategoryIndex = categoryIndex;
            updateCategoryName(currentCategoryIndex);
        }
    });
});
