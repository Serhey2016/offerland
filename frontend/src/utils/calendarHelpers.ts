import { DjangoTask, RecurrencePattern } from '../api/taskApi'

export interface CalendarEvent {
  id: string
  title: string
  start: Date
  end: Date
  allDay?: boolean
  resource?: any
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç—É—î Task –∑ recurrence_pattern –≤ –º–∞—Å–∏–≤ Calendar Events
 */
export const convertTaskToCalendarEvents = (task: DjangoTask): CalendarEvent[] => {
  const events: CalendarEvent[] = []
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è
  if (task.recurrence_pattern?.slots && task.recurrence_pattern.slots.length > 0) {
    // –†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –∫–æ–∂–µ–Ω —Å–ª–æ—Ç –≤ –æ–∫—Ä–µ–º—É –ø–æ–¥—ñ—é
    task.recurrence_pattern.slots.forEach((slot, index) => {
      const startDateTime = new Date(`${slot.date}T${slot.start_time}`)
      const endDateTime = new Date(`${slot.date}T${slot.end_time}`)
      
      events.push({
        id: `${task.slug}-slot-${index}`,
        title: slot.day_label ? `${task.title} - ${slot.day_label}` : task.title,
        start: startDateTime,
        end: endDateTime,
        allDay: false,
        resource: {
          taskId: task.id,
          taskSlug: task.slug,
          slotIndex: index,
          slotNotes: slot.notes,
          isRecurringSlot: true,
          totalSlots: task.recurrence_pattern.slots.length,
          recurrenceType: task.recurrence_pattern.type,
          priority: task.priority,
          status: task.status,
          category: task.category,
          description: task.description,
          note: task.note,
        }
      })
    })
  } else if (task.start_datetime && task.end_datetime) {
    // –ó–≤–∏—á–∞–π–Ω–∞ –ø–æ–¥—ñ—è –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –∑ start_datetime/end_datetime
    events.push({
      id: task.slug,
      title: task.title,
      start: new Date(task.start_datetime),
      end: new Date(task.end_datetime),
      allDay: false,
      resource: {
        taskId: task.id,
        taskSlug: task.slug,
        isRecurringSlot: false,
        priority: task.priority,
        status: task.status,
        category: task.category,
        description: task.description,
        note: task.note,
      }
    })
  } else if (task.date_start && task.date_end) {
    // Legacy: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ date_start/date_end (–¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
    const today = new Date()
    let startDate: Date
    let endDate: Date
    
    if (task.date_start && task.date_end) {
      startDate = new Date(task.date_start)
      endDate = new Date(task.date_end)
      endDate.setHours(23, 59, 59)
    } else {
      startDate = new Date(today)
      endDate = new Date(today)
      endDate.setHours(23, 59, 59)
    }
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —á–∞—Å
    const hasSpecificTime = task.time_start && task.time_end && 
      (new Date(task.time_start).getHours() !== 0 || 
       new Date(task.time_start).getMinutes() !== 0 ||
       new Date(task.time_end).getHours() !== 0 || 
       new Date(task.time_end).getMinutes() !== 0)
    
    if (hasSpecificTime && task.time_start && task.time_end) {
      startDate = new Date(task.time_start)
      endDate = new Date(task.time_end)
    }
    
    events.push({
      id: task.slug,
      title: task.title,
      start: startDate,
      end: endDate,
      allDay: !hasSpecificTime,
      resource: {
        taskId: task.id,
        taskSlug: task.slug,
        isRecurringSlot: false,
        priority: task.priority,
        status: task.status,
        category: task.category,
        description: task.description,
        note: task.note,
      }
    })
  } else {
    // Fallback: —Ç–∞—Å–∫–∞ –±–µ–∑ –¥–∞—Ç
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç–∞—Å–∫–∏
    const isDone = task.status === 'done' || task.category === 'done' || task.task_mode === 'completed'
    const isAgenda = task.status === 'agenda' || task.category === 'agenda'
    
    if (isDone) {
      // –í–∏–∫–æ–Ω–∞–Ω—ñ —Ç–∞—Å–∫–∏: –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –¢–Ü–õ–¨–ö–ò –≤ –¥–µ–Ω—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
      const completedDate = task.completed_at ? new Date(task.completed_at) : 
                           task.updated_at ? new Date(task.updated_at) : new Date()
      completedDate.setHours(0, 0, 0, 0)
      const endOfDay = new Date(completedDate)
      endOfDay.setHours(23, 59, 59, 999)
      
      events.push({
        id: task.slug,
        title: `‚úÖ ${task.title}`,
        start: completedDate,
        end: endOfDay,
        allDay: true,
        resource: {
          taskId: task.id,
          taskSlug: task.slug,
          isRecurringSlot: false,
          isCompleted: true,
          priority: task.priority,
          status: task.status,
          category: task.category,
          description: task.description,
          note: task.note,
          noDateSet: true,
        }
      })
    } else if (isAgenda) {
      // Agenda —Ç–∞—Å–∫–∏ (–Ω–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ): –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –©–û–î–ù–Ø –ø—Ä–æ—Ç—è–≥–æ–º N –¥–Ω—ñ–≤
      const daysToShow = 3 // –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–∞ 3 –¥–Ω—ñ –≤–ø–µ—Ä–µ–¥
      const today = new Date()
      today.setHours(0, 0, 0, 0)
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º—É –ø–æ–¥—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è
      for (let i = 0; i < daysToShow; i++) {
        const eventDate = new Date(today)
        eventDate.setDate(today.getDate() + i)
        
        const endOfDay = new Date(eventDate)
        endOfDay.setHours(23, 59, 59, 999)
        
        events.push({
          id: `${task.slug}-day-${i}`,
          title: `üìå ${task.title}`,
          start: eventDate,
          end: endOfDay,
          allDay: true,
          resource: {
            taskId: task.id,
            taskSlug: task.slug,
            isRecurringSlot: false,
            isAgendaItem: true,
            dayIndex: i,
            priority: task.priority,
            status: task.status,
            category: task.category,
            description: task.description,
            note: task.note,
            noDateSet: true,
          }
        })
      }
    } else {
      // –Ü–Ω—à—ñ —Ç–∞—Å–∫–∏ –±–µ–∑ –¥–∞—Ç: –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ
      const today = new Date()
      today.setHours(0, 0, 0, 0)
      const endOfDay = new Date(today)
      endOfDay.setHours(23, 59, 59, 999)
      
      events.push({
        id: task.slug,
        title: task.title,
        start: today,
        end: endOfDay,
        allDay: true,
        resource: {
          taskId: task.id,
          taskSlug: task.slug,
          isRecurringSlot: false,
          priority: task.priority,
          status: task.status,
          category: task.category,
          description: task.description,
          note: task.note,
          noDateSet: true,
        }
      })
    }
  }
  
  return events
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç—É—î –º–∞—Å–∏–≤ Tasks –≤ –º–∞—Å–∏–≤ Calendar Events
 */
export const convertTasksToCalendarEvents = (tasks: DjangoTask[]): CalendarEvent[] => {
  const allEvents: CalendarEvent[] = []
  
  tasks.forEach(task => {
    const taskEvents = convertTaskToCalendarEvents(task)
    allEvents.push(...taskEvents)
  })
  
  return allEvents
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î task –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–æ—é
 */
export const isRecurringTask = (task: DjangoTask): boolean => {
  return !!(task.recurrence_pattern?.slots && task.recurrence_pattern.slots.length > 0)
}

/**
 * –û—Ç—Ä–∏–º—É—î –∑–∞–≥–∞–ª—å–Ω—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—Å—ñ—Ö —Å–ª–æ—Ç—ñ–≤ (–≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö)
 */
export const getTotalRecurrenceDuration = (task: DjangoTask): number => {
  if (!isRecurringTask(task)) return 0
  
  let totalMinutes = 0
  task.recurrence_pattern!.slots.forEach(slot => {
    const start = new Date(`2000-01-01T${slot.start_time}`)
    const end = new Date(`2000-01-01T${slot.end_time}`)
    const durationMs = end.getTime() - start.getTime()
    totalMinutes += durationMs / (1000 * 60)
  })
  
  return totalMinutes
}

/**
 * –û—Ç—Ä–∏–º—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ—Ç—ñ–≤ —É –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—ñ
 */
export const getRecurrenceSlotCount = (task: DjangoTask): number => {
  if (!isRecurringTask(task)) return 0
  return task.recurrence_pattern!.slots.length
}

/**
 * –ì–µ–Ω–µ—Ä—É—î recurrence pattern –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è
 */
export const generateSimpleRecurrence = (
  startDate: string,
  endDate: string,
  startTime: string,
  endTime: string,
  type: 'daily' | 'weekly' = 'daily'
): RecurrencePattern => {
  const slots = []
  const start = new Date(startDate)
  const end = new Date(endDate)
  
  let currentDate = new Date(start)
  let dayCounter = 1
  
  while (currentDate <= end) {
    slots.push({
      date: currentDate.toISOString().split('T')[0],
      start_time: startTime,
      end_time: endTime,
      day_label: `Day ${dayCounter}`
    })
    
    // –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç—É—î–º–æ –¥–∞—Ç—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
    if (type === 'daily') {
      currentDate.setDate(currentDate.getDate() + 1)
    } else if (type === 'weekly') {
      currentDate.setDate(currentDate.getDate() + 7)
    }
    
    dayCounter++
  }
  
  return {
    type,
    slots,
    total_duration_minutes: getTotalDurationFromSlots(slots)
  }
}

/**
 * Helper: –æ–±—á–∏—Å–ª—é—î –∑–∞–≥–∞–ª—å–Ω—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑ –º–∞—Å–∏–≤—É —Å–ª–æ—Ç—ñ–≤
 */
const getTotalDurationFromSlots = (slots: Array<{ start_time: string; end_time: string }>): number => {
  let totalMinutes = 0
  slots.forEach(slot => {
    const start = new Date(`2000-01-01T${slot.start_time}`)
    const end = new Date(`2000-01-01T${slot.end_time}`)
    const durationMs = end.getTime() - start.getTime()
    totalMinutes += durationMs / (1000 * 60)
  })
  return totalMinutes
}

