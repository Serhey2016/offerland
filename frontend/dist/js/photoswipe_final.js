// –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è PhotoSwipe —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
console.log('=== PHOTOSWIPE FINAL VERSION ===');

document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded for PhotoSwipe final version');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    if (typeof PhotoSwipeLightbox === 'undefined') {
        console.error('‚ùå PhotoSwipeLightbox not found');
        return;
    }
    
    if (typeof PhotoSwipe === 'undefined') {
        console.error('‚ùå PhotoSwipe not found');
        return;
    }
    
    console.log('‚úÖ Libraries found');
    
    // –ò—â–µ–º –≥–∞–ª–µ—Ä–µ—é
    const gallery = document.querySelector('.social_feed_image_gallery_1');
    if (!gallery) {
        console.error('‚ùå Gallery not found');
        return;
    }
    
    console.log('‚úÖ Gallery found');
    
    // –ò—â–µ–º —Å—Å—ã–ª–∫–∏
    const links = gallery.querySelectorAll('a');
    console.log('‚úÖ Found', links.length, 'image links');
    
    if (links.length === 0) {
        console.error('‚ùå No image links found');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É
    links.forEach((link, index) => {
        const img = link.querySelector('img');
        console.log(`Link ${index + 1}:`, {
            href: link.href,
            imgSrc: img ? img.src : 'NO IMG',
            imgComplete: img ? img.complete : 'NO IMG'
        });
    });
    
    try {
        console.log('üîÑ Initializing PhotoSwipe with final configuration...');
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PhotoSwipe
        const lightbox = new PhotoSwipeLightbox({
            gallery: '.social_feed_image_gallery_1',
            children: 'a',
            pswpModule: PhotoSwipe,
            
            // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            showHideAnimationType: 'fade',
            showAnimationDuration: 300,
            hideAnimationDuration: 300,
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            maxZoomLevel: 4,
            minZoomLevel: 0.5,
            initialZoomLevel: 'fit',
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            imageScaleMethod: 'fit',
            allowImageZoom: true,
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
            getViewportSize: function() {
                return {
                    x: window.innerWidth,
                    y: window.innerHeight
                };
            },
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            getImageSize: function(image) {
                return new Promise((resolve) => {
                    const img = new Image();
                    img.onload = function() {
                        const naturalWidth = img.naturalWidth;
                        const naturalHeight = img.naturalHeight;
                        
                        console.log('Image natural size:', naturalWidth, 'x', naturalHeight);
                        
                        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        const viewportWidth = window.innerWidth;
                        const viewportHeight = window.innerHeight;
                        
                        // –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –≤–ø–∏—Å—ã–≤–∞–Ω–∏—è –≤ —ç–∫—Ä–∞–Ω
                        const scaleByWidth = viewportWidth / naturalWidth;
                        const scaleByHeight = viewportHeight / naturalHeight;
                        const scale = Math.min(scaleByWidth, scaleByHeight, 1);
                        
                        const displayWidth = naturalWidth * scale;
                        const displayHeight = naturalHeight * scale;
                        
                        console.log('Display size:', displayWidth, 'x', displayHeight);
                        
                        resolve({
                            x: displayWidth,
                            y: displayHeight
                        });
                    };
                    
                    img.onerror = function() {
                        console.warn('Failed to load image for size detection:', image.src);
                        resolve({
                            x: Math.min(1200, window.innerWidth * 0.8),
                            y: Math.min(800, window.innerHeight * 0.8)
                        });
                    };
                    
                    img.src = image.src;
                });
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        lightbox.on('uiRegister', function() {
            console.log('‚úÖ UI registered');
        });
        
        lightbox.on('beforeOpen', function() {
            console.log('‚úÖ Before open');
        });
        
        lightbox.on('open', function() {
            console.log('‚úÖ PhotoSwipe opened');
        });
        
        lightbox.on('contentLoad', function(e) {
            console.log('‚úÖ Content loaded:', e.content.data);
            
            if (e.content.data.type === 'image') {
                const img = e.content.element;
                if (img) {
                    console.log('‚úÖ Image element found:', img.src);
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    img.style.objectFit = 'contain';
                    img.style.maxWidth = '100%';
                    img.style.maxHeight = '100%';
                    img.style.display = 'block';
                    img.style.margin = '0 auto';
                    img.style.position = 'absolute';
                    img.style.top = '50%';
                    img.style.left = '50%';
                    img.style.transform = 'translate(-50%, -50%)';
                    
                    console.log('‚úÖ Image styles applied');
                }
            }
        });
        
        lightbox.on('firstUpdate', function() {
            console.log('‚úÖ First update');
        });
        
        lightbox.on('close', function() {
            console.log('‚úÖ PhotoSwipe closed');
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        lightbox.init();
        console.log('‚úÖ PhotoSwipe initialized successfully');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        gallery.addEventListener('click', function(e) {
            if (e.target.tagName === 'IMG') {
                console.log('üñ±Ô∏è Image clicked:', e.target.src);
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const testButton = document.createElement('button');
        testButton.textContent = 'Test PhotoSwipe';
        testButton.style.position = 'fixed';
        testButton.style.top = '10px';
        testButton.style.right = '10px';
        testButton.style.zIndex = '9999';
        testButton.style.padding = '10px';
        testButton.style.backgroundColor = 'blue';
        testButton.style.color = 'white';
        testButton.style.border = 'none';
        testButton.style.cursor = 'pointer';
        
        testButton.onclick = function() {
            console.log('=== MANUAL PHOTOSWIPE TEST ===');
            const firstLink = document.querySelector('.social_feed_image_gallery_1 a');
            if (firstLink) {
                console.log('Clicking first link:', firstLink.href);
                firstLink.click();
            }
        };
        
        document.body.appendChild(testButton);
        console.log('‚úÖ Test button added');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        setTimeout(function() {
            console.log('=== FINAL CHECK ===');
            console.log('PhotoSwipe status: OK');
            console.log('Gallery links:', links.length);
            console.log('Ready for testing!');
        }, 1000);
        
    } catch (error) {
        console.error('‚ùå Error initializing PhotoSwipe:', error);
        console.error('Error details:', error.message);
        console.error('Error stack:', error.stack);
    }
}); 